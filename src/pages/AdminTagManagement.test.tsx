// ABOUTME: Tests for AdminTagManagement ensuring StandardLayout integration and proper tag management interface behavior

import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import { MockProviders } from '@/test-utils/mock-providers';
import AdminTagManagement from './AdminTagManagement';

// Mock hooks
vi.mock('@/store/auth', () => ({
  useAuthStore: () => ({
    user: {
      user_metadata: {
        full_name: 'Admin User'
      }
    }
  })
}));

vi.mock('../../packages/hooks/useTagManagementQuery', () => ({
  useTagAnalyticsQuery: () => ({
    data: {
      totalTags: 156,
      activeTags: 142,
      unusedTags: 14,
      mostUsedTag: 'JavaScript'
    },
    isLoading: false,
    error: null
  })
}));

// Mock admin components that might not exist yet
vi.mock('@/components/admin/TagManagement/TagHierarchy', () => ({
  TagHierarchy: () => <div data-testid="tag-hierarchy">Tag Hierarchy Component</div>
}));

vi.mock('@/components/admin/TagManagement/TagAnalytics', () => ({
  TagAnalytics: () => <div data-testid="tag-analytics">Tag Analytics Component</div>
}));

vi.mock('@/components/admin/TagManagement/TagCleanup', () => ({
  TagCleanup: () => <div data-testid="tag-cleanup">Tag Cleanup Component</div>
}));

describe('AdminTagManagement', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('layout structure', () => {
    it('should render with StandardLayout wide type', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should have main element with wide layout characteristics
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();
      expect(main).toHaveClass('max-w-6xl'); // StandardLayout 'wide' type
      expect(main).toHaveClass('mx-auto');   // Centering
    });

    it('should have proper spacing with contentClassName', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      const main = screen.getByRole('main');
      expect(main).toHaveClass('space-y-6'); // contentClassName applied
    });

    it('should center content within available space', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Check for centering wrapper (generated by StandardLayout)
      const centeringWrapper = document.querySelector('.flex.justify-center');
      expect(centeringWrapper).toBeInTheDocument();
    });
  });

  describe('content structure', () => {
    it('should display the page header with proper typography', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      const heading = screen.getByRole('heading', { level: 2 });
      expect(heading).toBeInTheDocument();
      expect(heading).toHaveTextContent('Gestão de Tags');
      expect(heading).toHaveClass('text-3xl', 'font-bold', 'font-serif');
    });

    it('should display page description', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      const description = screen.getByText(/Organize e mantenha o sistema de tags/);
      expect(description).toBeInTheDocument();
    });

    it('should render statistics cards in responsive grid', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should have grid container for stats
      const statsGrid = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-4');
      expect(statsGrid).toBeInTheDocument();

      // Should display tag statistics
      const totalTags = screen.getByText('156');
      expect(totalTags).toBeInTheDocument();
    });

    it('should render tabs for tag management sections', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should have tabs for different management sections
      const hierarchyTab = screen.getByText(/Hierarquia/);
      const analyticsTab = screen.getByText(/Análise/);
      const cleanupTab = screen.getByText(/Limpeza/);

      expect(hierarchyTab).toBeInTheDocument();
      expect(analyticsTab).toBeInTheDocument();
      expect(cleanupTab).toBeInTheDocument();
    });
  });

  describe('responsive behavior', () => {
    it('should adapt statistics grid for mobile', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      const grid = document.querySelector('.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-4');
      expect(grid).toBeInTheDocument();
      expect(grid).toHaveClass('grid-cols-1'); // Mobile-first
    });

    it('should maintain proper spacing on all screen sizes', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      const main = screen.getByRole('main');
      expect(main).toHaveClass('space-y-6'); // Consistent spacing
    });
  });

  describe('accessibility', () => {
    it('should have proper semantic structure', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should have main landmark
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();

      // Should have proper heading hierarchy
      const mainHeading = screen.getByRole('heading', { level: 2 });
      expect(mainHeading).toBeInTheDocument();
    });

    it('should have accessible tab navigation', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Tabs should be accessible
      const tablist = screen.getByRole('tablist');
      expect(tablist).toBeInTheDocument();

      const tabs = screen.getAllByRole('tab');
      expect(tabs.length).toBeGreaterThan(0);
    });
  });

  describe('tag analytics integration', () => {
    it('should display tag analytics data when loaded', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should show analytics data in cards
      const totalTags = screen.getByText('156');
      const activeTags = screen.getByText('142');
      
      expect(totalTags).toBeInTheDocument();
      expect(activeTags).toBeInTheDocument();
    });

    it('should handle loading state appropriately', () => {
      // This would test loading spinners/skeletons when implemented
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Component should render without crashing during loading
      const heading = screen.getByText('Gestão de Tags');
      expect(heading).toBeInTheDocument();
    });
  });

  describe('layout integration compliance', () => {
    it('should follow StandardLayout architecture pattern', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      const main = screen.getByRole('main');
      
      // Should have StandardLayout 'wide' characteristics
      expect(main).toHaveClass('max-w-6xl'); // Wide type max-width
      expect(main).toHaveClass('mx-auto');   // Centering
      expect(main).toHaveClass('w-full');    // Full width within constraints
    });

    it('should not have custom layout implementations', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should NOT have old custom container classes
      const customContainer = document.querySelector('.container.mx-auto');
      expect(customContainer).not.toBeInTheDocument();

      // Should NOT have old space-y-6 div wrapper
      const customSpacing = document.querySelector('div.space-y-6 > div.mb-6');
      expect(customSpacing).not.toBeInTheDocument();
    });

    it('should maintain content width constraints', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      const main = screen.getByRole('main');
      
      // Should have proper width constraints (not full screen width)
      expect(main).toHaveClass('max-w-6xl');
      
      // Should not touch screen edges
      expect(main).not.toHaveClass('w-screen');
      expect(main).not.toHaveClass('min-w-full');
    });
  });

  describe('tag management functionality', () => {
    it('should provide access to tag hierarchy management', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should have hierarchy tab
      const hierarchyTab = screen.getByText(/Hierarquia/);
      expect(hierarchyTab).toBeInTheDocument();
    });

    it('should provide access to tag analytics', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should have analytics tab
      const analyticsTab = screen.getByText(/Análise/);
      expect(analyticsTab).toBeInTheDocument();
    });

    it('should provide access to tag cleanup tools', () => {
      render(
        <MockProviders>
          <AdminTagManagement />
        </MockProviders>
      );

      // Should have cleanup tab
      const cleanupTab = screen.getByText(/Limpeza/);
      expect(cleanupTab).toBeInTheDocument();
    });
  });
});
// ABOUTME: Tests for AdminLayoutManagement ensuring StandardLayout integration and proper admin interface behavior

import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import { MockAllProviders } from '@/test-utils/mock-providers';
import AdminLayoutManagement from './AdminLayoutManagement';

// Mock auth store
vi.mock('@/store/auth', () => ({
  useAuthStore: () => ({
    user: {
      user_metadata: {
        full_name: 'Admin User'
      }
    }
  })
}));

describe('AdminLayoutManagement', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('layout structure', () => {
    it('should render with StandardLayout wide type', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      // Should have ErrorBoundary structure
      const errorBoundary = document.querySelector('[data-error-boundary]');
      expect(errorBoundary).toBeInTheDocument();

      // Should have main element with wide layout characteristics
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();
      expect(main).toHaveClass('max-w-4xl'); // StandardLayout 'centered' type
    });

    it('should have proper spacing with contentClassName', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      expect(main).toHaveClass('space-y-6'); // contentClassName applied
    });

    it('should center content within available space', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      // Check for centering wrapper (generated by StandardLayout)
      const centeringWrapper = document.querySelector('.flex.justify-center');
      expect(centeringWrapper).toBeInTheDocument();
    });
  });

  describe('content structure', () => {
    it('should display the page header with proper typography', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      const heading = screen.getByRole('heading', { level: 2 });
      expect(heading).toBeInTheDocument();
      expect(heading).toHaveTextContent('Gestão de Layout');
      expect(heading).toHaveClass('text-2xl', 'font-bold');
    });

    it('should display page description', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      const description = screen.getByText(/Configure o sistema visual, temas e componentes/);
      expect(description).toBeInTheDocument();
    });

    it('should render statistics cards in responsive grid', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      // Should have grid container for stats
      const statsGrid = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-4');
      expect(statsGrid).toBeInTheDocument();

      // Should have stat cards
      const statCards = screen.getAllByText(/\d+/); // Numbers in stat cards
      expect(statCards.length).toBeGreaterThan(0);
    });

    it('should render visual system section', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      const visualSystemHeading = screen.getByText('Sistema Visual');
      expect(visualSystemHeading).toBeInTheDocument();

      // Should have visual system tool buttons
      const colorEditor = screen.getByText('Editor de Cores');
      const gridConfig = screen.getByText('Configurar Grid');
      const typography = screen.getByText('Tipografia');
      
      expect(colorEditor).toBeInTheDocument();
      expect(gridConfig).toBeInTheDocument();
      expect(typography).toBeInTheDocument();
    });
  });

  describe('responsive behavior', () => {
    it('should adapt statistics grid for mobile', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      const grid = document.querySelector('.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-4');
      expect(grid).toBeInTheDocument();
      expect(grid).toHaveClass('grid-cols-1'); // Mobile-first
    });

    it('should maintain proper spacing on all screen sizes', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      expect(main).toHaveClass('space-y-6'); // Consistent spacing
    });
  });

  describe('accessibility', () => {
    it('should have proper semantic structure', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      // Should have main landmark
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();

      // Should have proper heading hierarchy
      const mainHeading = screen.getByRole('heading', { level: 2 });
      expect(mainHeading).toBeInTheDocument();
    });

    it('should have accessible card structures', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      // Should have main content structure
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();
    });
  });

  describe('error boundary integration', () => {
    it('should be wrapped in ErrorBoundary with correct props', () => {
      const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});
      
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      // Should have error boundary attributes
      const errorBoundary = document.querySelector('[data-error-boundary]');
      expect(errorBoundary).toBeInTheDocument();

      consoleSpy.mockRestore();
    });
  });

  describe('admin role integration', () => {
    it('should display admin user information when available', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      // The component should render properly with admin context
      const heading = screen.getByText('Gestão de Layout');
      expect(heading).toBeInTheDocument();
    });
  });

  describe('layout integration compliance', () => {
    it('should follow StandardLayout architecture pattern', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      
      // Should have StandardLayout 'centered' characteristics
      expect(main).toHaveClass('max-w-4xl'); // Centered type max-width
      expect(main).toHaveClass('mx-auto');   // Centering
      expect(main).toHaveClass('w-full');    // Full width within constraints
    });

    it('should not have custom layout implementations', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      // Should NOT have old custom container classes
      const customContainer = document.querySelector('.container.mx-auto');
      expect(customContainer).not.toBeInTheDocument();

      // Should NOT have old manual spacing wrappers (StandardLayout handles this)
      const manualSpacingWrapper = document.querySelector('div.container > div.space-y-6');
      expect(manualSpacingWrapper).not.toBeInTheDocument();
    });

    it('should maintain content width constraints', () => {
      render(
        <MockAllProviders>
          <AdminLayoutManagement />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      
      // Should have proper width constraints (not full screen width)
      expect(main).toHaveClass('max-w-4xl');
      
      // Should not touch screen edges
      expect(main).not.toHaveClass('w-screen');
      expect(main).not.toHaveClass('min-w-full');
    });
  });
});
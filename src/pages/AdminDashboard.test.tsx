// ABOUTME: Tests for AdminDashboard ensuring StandardLayout integration and proper dashboard interface behavior

import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import { MockAllProviders } from '@/test-utils/mock-providers';
import AdminDashboard from './AdminDashboard';

// Mock auth store
vi.mock('@/store/auth', () => ({
  useAuthStore: () => ({
    user: {
      user_metadata: {
        full_name: 'Admin User'
      }
    }
  })
}));

describe('AdminDashboard', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('layout structure', () => {
    it('should render with ErrorBoundary wrapper', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Should render children without errors (indicating ErrorBoundary is working)
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();
    });

    it('should render with StandardLayout wide type', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Should have main element with wide layout characteristics
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();
      expect(main).toHaveClass('max-w-6xl'); // StandardLayout 'wide' type
      expect(main).toHaveClass('mx-auto');   // Centering
    });

    it('should have proper spacing with contentClassName', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      expect(main).toHaveClass('space-y-8'); // contentClassName applied
    });

    it('should center content within available space', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Check for centering wrapper (generated by StandardLayout)
      const centeringWrapper = document.querySelector('.flex.justify-center');
      expect(centeringWrapper).toBeInTheDocument();
    });
  });

  describe('content structure', () => {
    it('should display personalized welcome header', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const heading = screen.getByRole('heading', { level: 2 });
      expect(heading).toBeInTheDocument();
      expect(heading).toHaveTextContent('Bem-vindo, Admin User');
      expect(heading).toHaveClass('text-3xl', 'font-bold', 'font-serif');
    });

    it('should display dashboard description', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const description = screen.getByText(/Visão geral do sistema e estatísticas principais/);
      expect(description).toBeInTheDocument();
    });

    it('should render statistics cards in responsive grid', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Should have grid container for stats
      const statsGrid = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.xl\\:grid-cols-4');
      expect(statsGrid).toBeInTheDocument();

      // Should display all stat cards
      const totalReviews = screen.getByText('Total de Reviews');
      const activeUsers = screen.getByText('Usuários Ativos');
      const communityPosts = screen.getByText('Posts da Comunidade');
      const engagement = screen.getByText('Engajamento');

      expect(totalReviews).toBeInTheDocument();
      expect(activeUsers).toBeInTheDocument();
      expect(communityPosts).toBeInTheDocument();
      expect(engagement).toBeInTheDocument();

      // Should display stat values
      const reviewCount = screen.getByText('42');
      const userCount = screen.getByText('1,234');
      const postCount = screen.getByText('89');
      const engagementRate = screen.getByText('94%');

      expect(reviewCount).toBeInTheDocument();
      expect(userCount).toBeInTheDocument();
      expect(postCount).toBeInTheDocument();
      expect(engagementRate).toBeInTheDocument();
    });

    it('should render quick actions section', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const quickActionsHeading = screen.getByText('Ações Rápidas');
      expect(quickActionsHeading).toBeInTheDocument();

      // Should have action items
      const publicationQueue = screen.getByText('Fila de Publicação');
      const moderation = screen.getByText('Moderação');

      expect(publicationQueue).toBeInTheDocument();
      expect(moderation).toBeInTheDocument();

      // Should have action descriptions
      const pendingReviews = screen.getByText('3 reviews aguardando aprovação');
      const reportedPosts = screen.getByText('2 posts reportados');

      expect(pendingReviews).toBeInTheDocument();
      expect(reportedPosts).toBeInTheDocument();
    });

    it('should render recent activity section', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const recentActivityHeading = screen.getByText('Atividade Recente');
      expect(recentActivityHeading).toBeInTheDocument();

      // Should have activity items
      const approvedReview = screen.getByText(/Review "Análise de Performance" aprovada/);
      const newUser = screen.getByText('Novo usuário registrado');
      const moderatedPost = screen.getByText('Post da comunidade moderado');

      expect(approvedReview).toBeInTheDocument();
      expect(newUser).toBeInTheDocument();
      expect(moderatedPost).toBeInTheDocument();

      // Should have timestamps
      const twoHours = screen.getByText('há 2 horas');
      const fourHours = screen.getByText('há 4 horas');
      const sixHours = screen.getByText('há 6 horas');

      expect(twoHours).toBeInTheDocument();
      expect(fourHours).toBeInTheDocument();
      expect(sixHours).toBeInTheDocument();
    });
  });

  describe('responsive behavior', () => {
    it('should adapt statistics grid for different screen sizes', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const statsGrid = document.querySelector('.grid-cols-1.md\\:grid-cols-2.xl\\:grid-cols-4');
      expect(statsGrid).toBeInTheDocument();
      expect(statsGrid).toHaveClass('grid-cols-1'); // Mobile-first
    });

    it('should adapt lower section grid for mobile', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const lowerGrid = document.querySelector('.grid.grid-cols-1.lg\\:grid-cols-2');
      expect(lowerGrid).toBeInTheDocument();
      expect(lowerGrid).toHaveClass('grid-cols-1'); // Mobile-first
    });

    it('should maintain proper spacing on all screen sizes', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      expect(main).toHaveClass('space-y-8'); // Consistent spacing
    });
  });

  describe('accessibility', () => {
    it('should have proper semantic structure', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Should have main landmark
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();

      // Should have proper heading hierarchy
      const mainHeading = screen.getByRole('heading', { level: 2 });
      expect(mainHeading).toBeInTheDocument();
    });

    it('should have accessible interactive elements', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Quick action items should be interactive
      const quickActions = document.querySelectorAll('.cursor-pointer');
      expect(quickActions.length).toBeGreaterThan(0);
    });

    it('should have proper color indicators for activity', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Should have colored status indicators
      const greenIndicator = document.querySelector('.bg-green-500');
      const blueIndicator = document.querySelector('.bg-blue-500');
      const yellowIndicator = document.querySelector('.bg-yellow-500');

      expect(greenIndicator).toBeInTheDocument();
      expect(blueIndicator).toBeInTheDocument();
      expect(yellowIndicator).toBeInTheDocument();
    });
  });

  describe('error boundary integration', () => {
    it('should be wrapped in ErrorBoundary with correct props', () => {
      const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});
      
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Should render without throwing errors (indicating ErrorBoundary is working)
      const heading = screen.getByText(/Bem-vindo, Admin User/);
      expect(heading).toBeInTheDocument();

      consoleSpy.mockRestore();
    });

    it('should have proper error boundary configuration', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Component should render without throwing errors
      const heading = screen.getByText(/Bem-vindo, Admin User/);
      expect(heading).toBeInTheDocument();
    });
  });

  describe('layout integration compliance', () => {
    it('should follow StandardLayout architecture pattern', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      
      // Should have StandardLayout 'wide' characteristics
      expect(main).toHaveClass('max-w-6xl'); // Wide type max-width
      expect(main).toHaveClass('mx-auto');   // Centering
      expect(main).toHaveClass('w-full');    // Full width within constraints
    });

    it('should not have custom layout implementations', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Should NOT have old custom container classes
      const customContainer = document.querySelector('.container.mx-auto');
      expect(customContainer).not.toBeInTheDocument();

      // Should NOT have old space-y-8 div wrapper
      const customSpacing = document.querySelector('div.space-y-8 > div.space-y-2');
      expect(customSpacing).not.toBeInTheDocument();
    });

    it('should maintain content width constraints', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      
      // Should have proper width constraints (not full screen width)
      expect(main).toHaveClass('max-w-6xl');
      
      // Should not touch screen edges
      expect(main).not.toHaveClass('w-screen');
      expect(main).not.toHaveClass('min-w-full');
    });

    it('should not violate layout system architecture', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Should be wrapped in ErrorBoundary + StandardLayout pattern
      const main = screen.getByRole('main');
      
      expect(main).toBeInTheDocument();
      expect(main).toHaveClass('max-w-6xl'); // Proper constraints
    });
  });

  describe('administrative role compliance', () => {
    it('should be accessible only to admin users', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Component should render for admin context
      const heading = screen.getByText(/Bem-vindo, Admin User/);
      expect(heading).toBeInTheDocument();
    });

    it('should maintain admin-specific styling', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const main = screen.getByRole('main');
      
      // Should use 'wide' layout appropriate for admin interfaces
      expect(main).toHaveClass('max-w-6xl');
    });
  });

  describe('user profile integration', () => {
    it('should display admin user name when available', () => {
      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      const heading = screen.getByText('Bem-vindo, Admin User');
      expect(heading).toBeInTheDocument();
    });

    it('should handle missing user metadata gracefully', () => {
      // Mock auth store without user metadata
      vi.doMock('@/store/auth', () => ({
        useAuthStore: () => ({
          user: null
        })
      }));

      render(
        <MockAllProviders>
          <AdminDashboard />
        </MockAllProviders>
      );

      // Component should still render without crashing
      const main = screen.getByRole('main');
      expect(main).toBeInTheDocument();
    });
  });
});